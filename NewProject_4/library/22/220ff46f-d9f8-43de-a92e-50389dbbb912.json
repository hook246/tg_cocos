{
  "__type__": "cc.EffectAsset",
  "_name": "../resources/effect/flow",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "name": "opaque",
      "passes": [
        {
          "rasterizerState": {
            "cullMode": 0
          },
          "program": "../resources/effect/flow|vs:vert|fs:frag",
          "depthStencilState": {
            "depthTest": false,
            "depthWrite": false
          },
          "properties": {
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "_lineColor": {
              "value": [
                1,
                1,
                1,
                1
              ],
              "editor": {
                "type": "color"
              },
              "type": 16
            },
            "_lineWidth": {
              "value": [
                0.01
              ],
              "editor": {
                "type": "float",
                "slide": true,
                "range": [
                  0,
                  1
                ],
                "step": 0.01
              },
              "type": 13
            },
            "_speed": {
              "value": [
                1.5
              ],
              "editor": {
                "type": "float",
                "slide": true,
                "range": [
                  1,
                  10
                ],
                "step": 0.01
              },
              "type": 13
            }
          }
        }
      ]
    },
    {
      "name": "transparent",
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true,
                "blendSrc": 2,
                "blendDst": 4,
                "blendDstAlpha": 4
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "program": "../resources/effect/flow|vs:vert|fs:frag",
          "depthStencilState": {
            "depthTest": false,
            "depthWrite": false
          },
          "properties": {
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "_lineColor": {
              "value": [
                1,
                1,
                1,
                1
              ],
              "editor": {
                "type": "color"
              },
              "type": 16
            },
            "_lineWidth": {
              "value": [
                0.01
              ],
              "editor": {
                "type": "float",
                "slide": true,
                "range": [
                  0,
                  1
                ],
                "step": 0.01
              },
              "type": 13
            },
            "_speed": {
              "value": [
                1.5
              ],
              "editor": {
                "type": "float",
                "slide": true,
                "range": [
                  1,
                  10
                ],
                "step": 0.01
              },
              "type": 13
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "blocks": [
        {
          "name": "ALPHA_TEST_DATA",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "stageFlags": 16,
          "binding": 0
        },
        {
          "name": "Constant",
          "members": [
            {
              "name": "_lineColor",
              "type": 16,
              "count": 1
            },
            {
              "name": "_lineWidth",
              "type": 13,
              "count": 1
            },
            {
              "name": "_speed",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "stageFlags": 16,
          "binding": 1
        }
      ],
      "samplerTextures": [],
      "samplers": [],
      "textures": [],
      "buffers": [],
      "images": [],
      "subpassInputs": [],
      "attributes": [
        {
          "name": "a_position",
          "defines": [],
          "format": 32,
          "location": 0
        },
        {
          "name": "a_texCoord",
          "defines": [],
          "format": 21,
          "location": 1
        },
        {
          "name": "a_color",
          "defines": [],
          "format": 44,
          "location": 2
        }
      ],
      "varyings": [
        {
          "name": "i_color",
          "type": 16,
          "count": 1,
          "defines": [],
          "stageFlags": 17,
          "location": 0
        },
        {
          "name": "uv0",
          "type": 14,
          "count": 1,
          "defines": [],
          "stageFlags": 17,
          "location": 1
        },
        {
          "name": "uv1",
          "type": 14,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "location": 2
        },
        {
          "name": "v_position",
          "type": 15,
          "count": 1,
          "defines": [],
          "stageFlags": 1,
          "location": 3
        }
      ],
      "fragColors": [
        {
          "name": "cc_FragColor",
          "typename": "vec4",
          "type": 16,
          "count": 1,
          "defines": [],
          "stageFlags": 16,
          "location": 0
        }
      ],
      "descriptors": [
        {
          "rate": 0,
          "blocks": [
            {
              "tags": {
                "builtin": "local"
              },
              "name": "CCLocal",
              "members": [
                {
                  "name": "cc_matWorld",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matWorldIT",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_lightingMapUVParam",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_localShadowBias",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_reflectionProbeData1",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_reflectionProbeData2",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                }
              ],
              "defines": [
                "USE_LOCAL"
              ],
              "stageFlags": 1
            }
          ],
          "samplerTextures": [
            {
              "tags": {
                "builtin": "local"
              },
              "name": "cc_spriteTexture",
              "typename": "sampler2D",
              "type": 28,
              "count": 1,
              "defines": [
                "USE_TEXTURE"
              ],
              "stageFlags": 16
            }
          ],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        },
        {
          "rate": 1,
          "blocks": [
            {
              "name": "ALPHA_TEST_DATA",
              "members": [
                {
                  "name": "alphaThreshold",
                  "type": 13,
                  "count": 1
                }
              ],
              "defines": [
                "USE_ALPHA_TEST"
              ],
              "stageFlags": 16,
              "binding": 0
            },
            {
              "name": "Constant",
              "members": [
                {
                  "name": "_lineColor",
                  "type": 16,
                  "count": 1
                },
                {
                  "name": "_lineWidth",
                  "type": 13,
                  "count": 1
                },
                {
                  "name": "_speed",
                  "type": 13,
                  "count": 1
                }
              ],
              "defines": [],
              "stageFlags": 16,
              "binding": 1
            }
          ],
          "samplerTextures": [],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        },
        {
          "rate": 2,
          "blocks": [],
          "samplerTextures": [],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        },
        {
          "rate": 3,
          "blocks": [
            {
              "tags": {
                "builtin": "global"
              },
              "name": "CCGlobal",
              "members": [
                {
                  "name": "cc_time",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_screenSize",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_nativeSize",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_probeInfo",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_debug_view_mode",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                }
              ],
              "defines": [],
              "stageFlags": 17
            },
            {
              "tags": {
                "builtin": "global"
              },
              "name": "CCCamera",
              "members": [
                {
                  "name": "cc_matView",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matViewInv",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matProj",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matProjInv",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matViewProj",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_matViewProjInv",
                  "typename": "mat4",
                  "type": 25,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_cameraPos",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "highp "
                },
                {
                  "name": "cc_surfaceTransform",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_screenScale",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_exposure",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_mainLitDir",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_mainLitColor",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_ambientSky",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_ambientGround",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_fogColor",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_fogBase",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_fogAdd",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_nearFar",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                },
                {
                  "name": "cc_viewPort",
                  "typename": "vec4",
                  "type": 16,
                  "count": 1,
                  "precision": "mediump "
                }
              ],
              "defines": [],
              "stageFlags": 17
            }
          ],
          "samplerTextures": [],
          "samplers": [],
          "textures": [],
          "buffers": [],
          "images": [],
          "subpassInputs": []
        }
      ],
      "hash": 3674822304,
      "glsl4": {
        "vert": "\n precision highp float;\n layout(set = 0, binding = 0) uniform CCGlobal {\n   highp   vec4 cc_time;\n   mediump vec4 cc_screenSize;\n   mediump vec4 cc_nativeSize;\n   mediump vec4 cc_probeInfo;\n   mediump vec4 cc_debug_view_mode;\n };\n layout(set = 0, binding = 1) uniform CCCamera {\n   highp   mat4 cc_matView;\n   highp   mat4 cc_matViewInv;\n   highp   mat4 cc_matProj;\n   highp   mat4 cc_matProjInv;\n   highp   mat4 cc_matViewProj;\n   highp   mat4 cc_matViewProjInv;\n   highp   vec4 cc_cameraPos;\n   mediump vec4 cc_surfaceTransform;\n   mediump vec4 cc_screenScale;\n   mediump vec4 cc_exposure;\n   mediump vec4 cc_mainLitDir;\n   mediump vec4 cc_mainLitColor;\n   mediump vec4 cc_ambientSky;\n   mediump vec4 cc_ambientGround;\n   mediump vec4 cc_fogColor;\n   mediump vec4 cc_fogBase;\n   mediump vec4 cc_fogAdd;\n   mediump vec4 cc_nearFar;\n   mediump vec4 cc_viewPort;\n };\n #if USE_LOCAL\n   layout(set = 2, binding = 0) uniform CCLocal {\n     highp mat4 cc_matWorld;\n     highp mat4 cc_matWorldIT;\n     highp vec4 cc_lightingMapUVParam;\n     highp vec4 cc_localShadowBias;\n     highp vec4 cc_reflectionProbeData1;\n     highp vec4 cc_reflectionProbeData2;\n   };\n #endif\n #if SAMPLE_FROM_RT\n   #define QUATER_PI         0.78539816340\n   #define HALF_PI           1.57079632679\n   #define PI                3.14159265359\n   #define PI2               6.28318530718\n   #define PI4               12.5663706144\n   #define INV_QUATER_PI     1.27323954474\n   #define INV_HALF_PI       0.63661977237\n   #define INV_PI            0.31830988618\n   #define INV_PI2           0.15915494309\n   #define INV_PI4           0.07957747155\n   #define EPSILON           1e-6\n   #define EPSILON_LOWP      1e-4\n   #define LOG2              1.442695\n   #define EXP_VALUE         2.71828183f\n   #define FP_MAX            65504.0\n   #define FP_SCALE          0.0009765625\n   #define FP_SCALE_INV      1024.0\n   #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n         #define LIGHT_MAP_TYPE_DISABLED 0\n   #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n   #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n   #define REFLECTION_PROBE_TYPE_NONE 0\n   #define REFLECTION_PROBE_TYPE_CUBE 1\n   #define REFLECTION_PROBE_TYPE_PLANAR 2\n   #define LIGHT_TYPE_DIRECTIONAL 0.0\n   #define LIGHT_TYPE_POINT 1.0\n   #define LIGHT_TYPE_SPOT 2.0\n   #define LIGHT_TYPE_SPHERE 3.0\n   #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n   #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n   #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n   #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n   #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n   #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n   #define TONE_MAPPING_ACES 0\n   #define TONE_MAPPING_LINEAR 1\n   #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n #endif\n layout(location = 0) in vec3 a_position;\n layout(location = 1) in vec2 a_texCoord;\n layout(location = 2) in vec4 a_color;\n layout(location = 0) out vec4 i_color;\n layout(location = 1) out vec2 uv0;\n layout(location = 2) out vec2 uv1;\n layout(location = 3) out vec3 v_position;\nvec4 vert () {\n   vec4 pos = vec4(a_position, 1);\n   #if USE_LOCAL\n     pos = cc_matWorld * pos;\n   #endif\n   #if USE_PIXEL_ALIGNMENT\n     pos = cc_matView * pos;\n     pos.xyz = floor(pos.xyz);\n     pos = cc_matProj * pos;\n   #else\n     pos = cc_matViewProj * pos;\n   #endif\n   uv0 = a_texCoord;\n   #if SAMPLE_FROM_RT\n     uv1 = uv0;\n     uv1 = cc_cameraPos.w > 1.0 ? vec2(uv1.x, 1.0 - uv1.y) : uv1;\n   #endif\n   i_color = a_color;\n   #if USE_EXPAND\n     pos.x *= 2.0;\n     pos.y *= 2.0;\n   #endif\n   return pos;\n }\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#if USE_TEXTURE\n  layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;\n#endif\nlayout(location = 0) in vec4 i_color;\nlayout(location = 1) in vec2 uv0;\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 _lineColor;\n  float _lineWidth;\n  float _speed;\n};\nfloat getBgAlpha(vec2 uv) {\n  vec2 uv_up = uv + vec2(0, _lineWidth);\n  vec2 uv_down =uv - vec2(_lineWidth, 0);\n  vec2 uv_left = uv + vec2(_lineWidth, 0);\n  vec2 uv_right = uv + vec2(0, _lineWidth);\n  vec2 uv_up_left = uv + vec2(_lineWidth,-_lineWidth);\n  vec2 uv_up_right = uv + vec2(_lineWidth, _lineWidth);\n  vec2 uv_down_left = uv + vec2(-_lineWidth, -_lineWidth);\n  vec2 uv_down_right = uv + vec2(-_lineWidth, _lineWidth);\n  float blank_up = 0.0;\n  float blank_down = 0.0;\n  float blank_left = 0.0;\n  float blank_right = 0.0;\n  float blank_up_left = 0.0;\n  float blank_up_right = 0.0;\n  float blank_down_left = 0.0;\n  float blank_down_right = 0.0;\n  {\n    if(uv_up.x >= 0.0 && uv_up.x <= 1.0  && uv_up.y >= 0.0 && uv_up.y <= 1.0)\n    {\n      blank_up = 1.0;\n    }\n    if(uv_down.x >= 0.0 && uv_down.x <= 1.0  && uv_down.y >= 0.0 && uv_down.y <= 1.0)\n    {\n      blank_down = 1.0;\n    }\n    if(uv_left.x >= 0.0 && uv_left.x <= 1.0  && uv_left.y >= 0.0 && uv_left.y <= 1.0)\n    {\n      blank_left = 1.0;\n    }\n    if(uv_right.x >= 0.0 && uv_right.x <= 1.0  && uv_right.y >= 0.0 && uv_right.y <= 1.0)\n    {\n      blank_right = 1.0;\n    }\n    if(uv_up_left.x >= 0.0 && uv_up_left.x <= 1.0  && uv_up_left.y >= 0.0 && uv_up_left.y <= 1.0)\n    {\n      blank_up_left = 1.0;\n    }\n    if(uv_up_right.x >= 0.0 && uv_up_right.x <= 1.0  && uv_up_right.y >= 0.0 && uv_up_right.y <= 1.0)\n    {\n      blank_up_right = 1.0;\n    }\n    if(uv_down_left.x >= 0.0 && uv_down_left.x <= 1.0  && uv_down_left.y >= 0.0 && uv_down_left.y <= 1.0)\n    {\n      blank_down_left = 1.0;\n    }\n    if(uv_down_right.x >= 0.0 && uv_down_right.x <= 1.0  && uv_down_right.y >= 0.0 && uv_down_right.y <= 1.0)\n    {\n      blank_down_right = 1.0;\n    }\n  }\n  vec4 color_up = texture(cc_spriteTexture, uv_up) * blank_up;\n  vec4 color_down = texture(cc_spriteTexture, uv_down) * blank_down;\n  vec4 color_left = texture(cc_spriteTexture, uv_left) * blank_left;\n  vec4 color_right = texture(cc_spriteTexture, uv_right) * blank_right;\n  vec4 color_up_left = texture(cc_spriteTexture, uv_up_left) * blank_up_left;\n  vec4 color_up_right = texture(cc_spriteTexture, uv_up_right)* blank_up_right;\n  vec4 color_down_left = texture(cc_spriteTexture,  uv_down_left) * blank_down_left;\n  vec4 color_down_right = texture(cc_spriteTexture,  uv_down_right) * blank_down_right;\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\nvec4 frag () {\n  vec4 o = i_color;\n  vec2 uv = uv0;\n  #if USE_EXPAND\n    uv = (uv-0.5) *2.0 + 0.5;\n  #endif\n  #if USE_TEXTURE\n      if(uv.x >= 0.0 && uv.x <= 1.0  && uv.y >= 0.0 && uv.y <= 1.0)\n      {\n        o = texture(cc_spriteTexture, uv);\n      }\n      else\n      {\n        o = vec4(0.0);\n      }\n  #endif\n  vec2 coord = uv0 - 0.5;\n  float angle = atan(coord.x, coord.y);\n  angle += (cc_time.x * _speed);\n  angle = mod(angle,PI2);\n  if(angle > 0.0 && angle < HALF_PI)\n  {\n      if (_lineWidth  > 0.0) {\n        vec4 color_dest = _lineColor * getBgAlpha(uv) * (1.0 - angle / HALF_PI);\n        vec4 color_src = o;\n        o = color_src * color_src.a + color_dest * (1.0 - color_src.a);\n      }\n  }\n  o *= i_color;\n  ALPHA_TEST(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\n precision highp float;\n layout(std140) uniform CCGlobal {\n   highp   vec4 cc_time;\n   mediump vec4 cc_screenSize;\n   mediump vec4 cc_nativeSize;\n   mediump vec4 cc_probeInfo;\n   mediump vec4 cc_debug_view_mode;\n };\n layout(std140) uniform CCCamera {\n   highp   mat4 cc_matView;\n   highp   mat4 cc_matViewInv;\n   highp   mat4 cc_matProj;\n   highp   mat4 cc_matProjInv;\n   highp   mat4 cc_matViewProj;\n   highp   mat4 cc_matViewProjInv;\n   highp   vec4 cc_cameraPos;\n   mediump vec4 cc_surfaceTransform;\n   mediump vec4 cc_screenScale;\n   mediump vec4 cc_exposure;\n   mediump vec4 cc_mainLitDir;\n   mediump vec4 cc_mainLitColor;\n   mediump vec4 cc_ambientSky;\n   mediump vec4 cc_ambientGround;\n   mediump vec4 cc_fogColor;\n   mediump vec4 cc_fogBase;\n   mediump vec4 cc_fogAdd;\n   mediump vec4 cc_nearFar;\n   mediump vec4 cc_viewPort;\n };\n #if USE_LOCAL\n   layout(std140) uniform CCLocal {\n     highp mat4 cc_matWorld;\n     highp mat4 cc_matWorldIT;\n     highp vec4 cc_lightingMapUVParam;\n     highp vec4 cc_localShadowBias;\n     highp vec4 cc_reflectionProbeData1;\n     highp vec4 cc_reflectionProbeData2;\n   };\n #endif\n #if SAMPLE_FROM_RT\n   #define QUATER_PI         0.78539816340\n   #define HALF_PI           1.57079632679\n   #define PI                3.14159265359\n   #define PI2               6.28318530718\n   #define PI4               12.5663706144\n   #define INV_QUATER_PI     1.27323954474\n   #define INV_HALF_PI       0.63661977237\n   #define INV_PI            0.31830988618\n   #define INV_PI2           0.15915494309\n   #define INV_PI4           0.07957747155\n   #define EPSILON           1e-6\n   #define EPSILON_LOWP      1e-4\n   #define LOG2              1.442695\n   #define EXP_VALUE         2.71828183f\n   #define FP_MAX            65504.0\n   #define FP_SCALE          0.0009765625\n   #define FP_SCALE_INV      1024.0\n   #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n         #define LIGHT_MAP_TYPE_DISABLED 0\n   #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n   #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n   #define REFLECTION_PROBE_TYPE_NONE 0\n   #define REFLECTION_PROBE_TYPE_CUBE 1\n   #define REFLECTION_PROBE_TYPE_PLANAR 2\n   #define LIGHT_TYPE_DIRECTIONAL 0.0\n   #define LIGHT_TYPE_POINT 1.0\n   #define LIGHT_TYPE_SPOT 2.0\n   #define LIGHT_TYPE_SPHERE 3.0\n   #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n   #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n   #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n   #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n   #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n   #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n   #define TONE_MAPPING_ACES 0\n   #define TONE_MAPPING_LINEAR 1\n   #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n #endif\n in vec3 a_position;\n in vec2 a_texCoord;\n in vec4 a_color;\n out vec4 i_color;\n out vec2 uv0;\n out vec2 uv1;\n out vec3 v_position;\nvec4 vert () {\n   vec4 pos = vec4(a_position, 1);\n   #if USE_LOCAL\n     pos = cc_matWorld * pos;\n   #endif\n   #if USE_PIXEL_ALIGNMENT\n     pos = cc_matView * pos;\n     pos.xyz = floor(pos.xyz);\n     pos = cc_matProj * pos;\n   #else\n     pos = cc_matViewProj * pos;\n   #endif\n   uv0 = a_texCoord;\n   #if SAMPLE_FROM_RT\n     uv1 = uv0;\n     uv1 = cc_cameraPos.w > 1.0 ? vec2(uv1.x, 1.0 - uv1.y) : uv1;\n   #endif\n   i_color = a_color;\n   #if USE_EXPAND\n     pos.x *= 2.0;\n     pos.y *= 2.0;\n   #endif\n   return pos;\n }\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nin vec4 i_color;\nin vec2 uv0;\nlayout(std140) uniform Constant {\n  vec4 _lineColor;\n  float _lineWidth;\n  float _speed;\n};\nfloat getBgAlpha(vec2 uv) {\n  vec2 uv_up = uv + vec2(0, _lineWidth);\n  vec2 uv_down =uv - vec2(_lineWidth, 0);\n  vec2 uv_left = uv + vec2(_lineWidth, 0);\n  vec2 uv_right = uv + vec2(0, _lineWidth);\n  vec2 uv_up_left = uv + vec2(_lineWidth,-_lineWidth);\n  vec2 uv_up_right = uv + vec2(_lineWidth, _lineWidth);\n  vec2 uv_down_left = uv + vec2(-_lineWidth, -_lineWidth);\n  vec2 uv_down_right = uv + vec2(-_lineWidth, _lineWidth);\n  float blank_up = 0.0;\n  float blank_down = 0.0;\n  float blank_left = 0.0;\n  float blank_right = 0.0;\n  float blank_up_left = 0.0;\n  float blank_up_right = 0.0;\n  float blank_down_left = 0.0;\n  float blank_down_right = 0.0;\n  {\n    if(uv_up.x >= 0.0 && uv_up.x <= 1.0  && uv_up.y >= 0.0 && uv_up.y <= 1.0)\n    {\n      blank_up = 1.0;\n    }\n    if(uv_down.x >= 0.0 && uv_down.x <= 1.0  && uv_down.y >= 0.0 && uv_down.y <= 1.0)\n    {\n      blank_down = 1.0;\n    }\n    if(uv_left.x >= 0.0 && uv_left.x <= 1.0  && uv_left.y >= 0.0 && uv_left.y <= 1.0)\n    {\n      blank_left = 1.0;\n    }\n    if(uv_right.x >= 0.0 && uv_right.x <= 1.0  && uv_right.y >= 0.0 && uv_right.y <= 1.0)\n    {\n      blank_right = 1.0;\n    }\n    if(uv_up_left.x >= 0.0 && uv_up_left.x <= 1.0  && uv_up_left.y >= 0.0 && uv_up_left.y <= 1.0)\n    {\n      blank_up_left = 1.0;\n    }\n    if(uv_up_right.x >= 0.0 && uv_up_right.x <= 1.0  && uv_up_right.y >= 0.0 && uv_up_right.y <= 1.0)\n    {\n      blank_up_right = 1.0;\n    }\n    if(uv_down_left.x >= 0.0 && uv_down_left.x <= 1.0  && uv_down_left.y >= 0.0 && uv_down_left.y <= 1.0)\n    {\n      blank_down_left = 1.0;\n    }\n    if(uv_down_right.x >= 0.0 && uv_down_right.x <= 1.0  && uv_down_right.y >= 0.0 && uv_down_right.y <= 1.0)\n    {\n      blank_down_right = 1.0;\n    }\n  }\n  vec4 color_up = texture(cc_spriteTexture, uv_up) * blank_up;\n  vec4 color_down = texture(cc_spriteTexture, uv_down) * blank_down;\n  vec4 color_left = texture(cc_spriteTexture, uv_left) * blank_left;\n  vec4 color_right = texture(cc_spriteTexture, uv_right) * blank_right;\n  vec4 color_up_left = texture(cc_spriteTexture, uv_up_left) * blank_up_left;\n  vec4 color_up_right = texture(cc_spriteTexture, uv_up_right)* blank_up_right;\n  vec4 color_down_left = texture(cc_spriteTexture,  uv_down_left) * blank_down_left;\n  vec4 color_down_right = texture(cc_spriteTexture,  uv_down_right) * blank_down_right;\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\nvec4 frag () {\n  vec4 o = i_color;\n  vec2 uv = uv0;\n  #if USE_EXPAND\n    uv = (uv-0.5) *2.0 + 0.5;\n  #endif\n  #if USE_TEXTURE\n      if(uv.x >= 0.0 && uv.x <= 1.0  && uv.y >= 0.0 && uv.y <= 1.0)\n      {\n        o = texture(cc_spriteTexture, uv);\n      }\n      else\n      {\n        o = vec4(0.0);\n      }\n  #endif\n  vec2 coord = uv0 - 0.5;\n  float angle = atan(coord.x, coord.y);\n  angle += (cc_time.x * _speed);\n  angle = mod(angle,PI2);\n  if(angle > 0.0 && angle < HALF_PI)\n  {\n      if (_lineWidth  > 0.0) {\n        vec4 color_dest = _lineColor * getBgAlpha(uv) * (1.0 - angle / HALF_PI);\n        vec4 color_src = o;\n        o = color_src * color_src.a + color_dest * (1.0 - color_src.a);\n      }\n  }\n  o *= i_color;\n  ALPHA_TEST(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl1": {
        "vert": "\n precision highp float;\n uniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n #if USE_LOCAL\n   uniform highp mat4 cc_matWorld;\n #endif\n #if SAMPLE_FROM_RT\n   #define QUATER_PI         0.78539816340\n   #define HALF_PI           1.57079632679\n   #define PI                3.14159265359\n   #define PI2               6.28318530718\n   #define PI4               12.5663706144\n   #define INV_QUATER_PI     1.27323954474\n   #define INV_HALF_PI       0.63661977237\n   #define INV_PI            0.31830988618\n   #define INV_PI2           0.15915494309\n   #define INV_PI4           0.07957747155\n   #define EPSILON           1e-6\n   #define EPSILON_LOWP      1e-4\n   #define LOG2              1.442695\n   #define EXP_VALUE         2.71828183f\n   #define FP_MAX            65504.0\n   #define FP_SCALE          0.0009765625\n   #define FP_SCALE_INV      1024.0\n   #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n         #define LIGHT_MAP_TYPE_DISABLED 0\n   #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n   #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n   #define REFLECTION_PROBE_TYPE_NONE 0\n   #define REFLECTION_PROBE_TYPE_CUBE 1\n   #define REFLECTION_PROBE_TYPE_PLANAR 2\n   #define LIGHT_TYPE_DIRECTIONAL 0.0\n   #define LIGHT_TYPE_POINT 1.0\n   #define LIGHT_TYPE_SPOT 2.0\n   #define LIGHT_TYPE_SPHERE 3.0\n   #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n   #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n   #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n   #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n   #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n   #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n   #define TONE_MAPPING_ACES 0\n   #define TONE_MAPPING_LINEAR 1\n   #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n #endif\n attribute vec3 a_position;\n attribute vec2 a_texCoord;\n attribute vec4 a_color;\n varying vec4 i_color;\n varying vec2 uv0;\n varying vec2 uv1;\n varying vec3 v_position;\nvec4 vert () {\n   vec4 pos = vec4(a_position, 1);\n   #if USE_LOCAL\n     pos = cc_matWorld * pos;\n   #endif\n   #if USE_PIXEL_ALIGNMENT\n     pos = cc_matView * pos;\n     pos.xyz = floor(pos.xyz);\n     pos = cc_matProj * pos;\n   #else\n     pos = cc_matViewProj * pos;\n   #endif\n   uv0 = a_texCoord;\n   #if SAMPLE_FROM_RT\n     uv1 = uv0;\n     uv1 = cc_cameraPos.w > 1.0 ? vec2(uv1.x, 1.0 - uv1.y) : uv1;\n   #endif\n   i_color = a_color;\n   #if USE_EXPAND\n     pos.x *= 2.0;\n     pos.y *= 2.0;\n   #endif\n   return pos;\n }\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_debug_view_mode;\nuniform mediump vec4 cc_surfaceTransform;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_IOR CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_IOR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FRESNEL CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_FRESNEL + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_TRANSMIT_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL CC_SURFACES_DEBUG_VIEW_TRANSMIT_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_TRANSMIT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL CC_SURFACES_DEBUG_VIEW_ENVIRONMENT_2ND_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_2ND_SPECULAR_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_ENABLE_WITH_CAMERA (cc_surfaceTransform.y != 3.0)\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (UnpackBitFromFloat(cc_debug_view_mode.w, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (UnpackBitFromFloat(cc_debug_view_mode.w, 7) && IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.y, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.y, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (UnpackBitFromFloat(cc_debug_view_mode.y, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (UnpackBitFromFloat(cc_debug_view_mode.y, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (UnpackBitFromFloat(cc_debug_view_mode.y, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (UnpackBitFromFloat(cc_debug_view_mode.y, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (UnpackBitFromFloat(cc_debug_view_mode.z, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (UnpackBitFromFloat(cc_debug_view_mode.z, 1) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (UnpackBitFromFloat(cc_debug_view_mode.z, 2) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (UnpackBitFromFloat(cc_debug_view_mode.z, 3) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FRESNEL (UnpackBitFromFloat(cc_debug_view_mode.z, 4) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_DIFFUSE (UnpackBitFromFloat(cc_debug_view_mode.z, 5) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TRANSMIT_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 6) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_2ND_SPECULAR (UnpackBitFromFloat(cc_debug_view_mode.z, 7) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TT (UnpackBitFromFloat(cc_debug_view_mode.w, 0) || !IS_DEBUG_VIEW_ENABLE_WITH_CAMERA)\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_POINT 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_SPHERE 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#if USE_TEXTURE\n  uniform sampler2D cc_spriteTexture;\n#endif\nvarying vec4 i_color;\nvarying vec2 uv0;\n   uniform vec4 _lineColor;\n   uniform float _lineWidth;\n   uniform float _speed;\nfloat getBgAlpha(vec2 uv) {\n  vec2 uv_up = uv + vec2(0, _lineWidth);\n  vec2 uv_down =uv - vec2(_lineWidth, 0);\n  vec2 uv_left = uv + vec2(_lineWidth, 0);\n  vec2 uv_right = uv + vec2(0, _lineWidth);\n  vec2 uv_up_left = uv + vec2(_lineWidth,-_lineWidth);\n  vec2 uv_up_right = uv + vec2(_lineWidth, _lineWidth);\n  vec2 uv_down_left = uv + vec2(-_lineWidth, -_lineWidth);\n  vec2 uv_down_right = uv + vec2(-_lineWidth, _lineWidth);\n  float blank_up = 0.0;\n  float blank_down = 0.0;\n  float blank_left = 0.0;\n  float blank_right = 0.0;\n  float blank_up_left = 0.0;\n  float blank_up_right = 0.0;\n  float blank_down_left = 0.0;\n  float blank_down_right = 0.0;\n  {\n    if(uv_up.x >= 0.0 && uv_up.x <= 1.0  && uv_up.y >= 0.0 && uv_up.y <= 1.0)\n    {\n      blank_up = 1.0;\n    }\n    if(uv_down.x >= 0.0 && uv_down.x <= 1.0  && uv_down.y >= 0.0 && uv_down.y <= 1.0)\n    {\n      blank_down = 1.0;\n    }\n    if(uv_left.x >= 0.0 && uv_left.x <= 1.0  && uv_left.y >= 0.0 && uv_left.y <= 1.0)\n    {\n      blank_left = 1.0;\n    }\n    if(uv_right.x >= 0.0 && uv_right.x <= 1.0  && uv_right.y >= 0.0 && uv_right.y <= 1.0)\n    {\n      blank_right = 1.0;\n    }\n    if(uv_up_left.x >= 0.0 && uv_up_left.x <= 1.0  && uv_up_left.y >= 0.0 && uv_up_left.y <= 1.0)\n    {\n      blank_up_left = 1.0;\n    }\n    if(uv_up_right.x >= 0.0 && uv_up_right.x <= 1.0  && uv_up_right.y >= 0.0 && uv_up_right.y <= 1.0)\n    {\n      blank_up_right = 1.0;\n    }\n    if(uv_down_left.x >= 0.0 && uv_down_left.x <= 1.0  && uv_down_left.y >= 0.0 && uv_down_left.y <= 1.0)\n    {\n      blank_down_left = 1.0;\n    }\n    if(uv_down_right.x >= 0.0 && uv_down_right.x <= 1.0  && uv_down_right.y >= 0.0 && uv_down_right.y <= 1.0)\n    {\n      blank_down_right = 1.0;\n    }\n  }\n  vec4 color_up = texture2D(cc_spriteTexture, uv_up) * blank_up;\n  vec4 color_down = texture2D(cc_spriteTexture, uv_down) * blank_down;\n  vec4 color_left = texture2D(cc_spriteTexture, uv_left) * blank_left;\n  vec4 color_right = texture2D(cc_spriteTexture, uv_right) * blank_right;\n  vec4 color_up_left = texture2D(cc_spriteTexture, uv_up_left) * blank_up_left;\n  vec4 color_up_right = texture2D(cc_spriteTexture, uv_up_right)* blank_up_right;\n  vec4 color_down_left = texture2D(cc_spriteTexture,  uv_down_left) * blank_down_left;\n  vec4 color_down_right = texture2D(cc_spriteTexture,  uv_down_right) * blank_down_right;\n  float total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  return clamp(total, 0.0, 1.0);\n}\nvec4 frag () {\n  vec4 o = i_color;\n  vec2 uv = uv0;\n  #if USE_EXPAND\n    uv = (uv-0.5) *2.0 + 0.5;\n  #endif\n  #if USE_TEXTURE\n      if(uv.x >= 0.0 && uv.x <= 1.0  && uv.y >= 0.0 && uv.y <= 1.0)\n      {\n        o = texture2D(cc_spriteTexture, uv);\n      }\n      else\n      {\n        o = vec4(0.0);\n      }\n  #endif\n  vec2 coord = uv0 - 0.5;\n  float angle = atan(coord.x, coord.y);\n  angle += (cc_time.x * _speed);\n  angle = mod(angle,PI2);\n  if(angle > 0.0 && angle < HALF_PI)\n  {\n      if (_lineWidth  > 0.0) {\n        vec4 color_dest = _lineColor * getBgAlpha(uv) * (1.0 - angle / HALF_PI);\n        vec4 color_src = o;\n        o = color_src * color_src.a + color_dest * (1.0 - color_src.a);\n      }\n  }\n  o *= i_color;\n  ALPHA_TEST(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            },
            {
              "name": "CCCamera",
              "defines": []
            }
          ],
          "samplerTextures": [],
          "buffers": [],
          "images": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": [
                "USE_LOCAL"
              ]
            }
          ],
          "samplerTextures": [
            {
              "name": "cc_spriteTexture",
              "defines": [
                "USE_TEXTURE"
              ]
            }
          ],
          "buffers": [],
          "images": []
        },
        "statistics": {
          "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 54,
          "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 46
        }
      },
      "defines": [
        {
          "name": "USE_LOCAL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "SAMPLE_FROM_RT",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_PIXEL_ALIGNMENT",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_EXPAND",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        }
      ],
      "name": "../resources/effect/flow|vs:vert|fs:frag"
    }
  ],
  "combinations": [],
  "hideInEditor": false
}
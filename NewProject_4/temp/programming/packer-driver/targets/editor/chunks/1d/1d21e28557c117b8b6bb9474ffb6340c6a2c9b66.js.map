{"version":3,"sources":["file:///Users/feiwang/tg_cocos/NewProject_4/assets/resources/scripts/LogicCtl.ts"],"names":["_decorator","Component","Node","Prefab","Vec3","instantiate","Input","input","UITransform","tween","BoxCtl","EventDispatcher","GameData","HeroCtl","SoundCtl","ccclass","property","LogicCtl","type","hero_ctl","box_arr","touch_time","start","on","EventType","TOUCH_START","touch_start","TOUCH_END","touch_end","run_game","e","get_game_state","set_game_state","sound_ctl","play_start","play_stop","length","set_sibling","node","children","reset_angle","jump_by_box","score","collider_node","play_score","slip","miss","computed_step_score","record_history_score","show_score","jump_end_effect","get_instance","target","emit","UPDATE_SCORE_LABEL","next_box","move","SHOW_OVER_WINDOW","step_clear","last_position","getPosition","nor_v3","clone","subtract","normalize","r_x_y","Math","random","x","new_position","y","create_box","action_tween","first","second","mid_position","world_position","getComponent","convertToWorldSpaceAR","canvas_position","getParent","convertToNodeSpaceAR","pos","light_house","by","position","update","deltaTime","get_height","clear_all","removeAllChildren","splice","ctl","box_pre","random_box","push","game_state","setPosition","box_1","hero_pre","init_hero","get_jump_position","auto_jump","pos_hero","pos_box","jump_by_postion","box","shift","removeFromParent"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab, Vec3, instantiate, Input, input, EventTouch, UITransform, tween, Sprite, Color, Game } from 'cc';\nimport { BoxCtl } from './BoxCtl';\nimport { EventDispatcher } from './EventDispatcher';\nimport { GameData } from './GameData';\nimport { HeroCtl } from './HeroCtl';\nimport { SoundCtl } from './SoundCtl';\nconst { ccclass, property } = _decorator;\n\n/**\n * 逻辑脚本\n * @author 一朵毛山\n * Construct \n */\n@ccclass('LogicCtl')\nexport class LogicCtl extends Component {\n    //箱子预制体\n    @property({ type: Prefab })\n    box_pre: Prefab = null;\n    //英雄预制体\n    @property({ type: Prefab })\n    hero_pre: Prefab = null;\n    //声音脚本\n    @property({ type: SoundCtl })\n    sound_ctl: SoundCtl = null;\n    //hero脚本\n    hero_ctl: HeroCtl = null;\n    //logic_layer中的所有箱子信息\n    box_arr: BoxCtl[] = [];\n    //跳跃的时间\n    touch_time: number = 0;\n    //小白球预制体\n    @property({ type: Prefab })\n    ball_pre: Prefab = null;\n    //屏幕移动的参考点\n    @property({ type: Node })\n    light_house: Node = null;\n\n    start() {\n        //注册触控事件\n        input.on(Input.EventType.TOUCH_START, this.touch_start, this);\n        input.on(Input.EventType.TOUCH_END, this.touch_end, this);\n        //默认游戏状态为自动跳,并且初始化2个箱子一个英雄\n        this.run_game(-1);\n    }\n\n    /**\n     * 触控开始\n     * @param e \n     * @returns \n     */\n    touch_start(e: EventTouch) {\n        //合法性判断\n        if (GameData.get_game_state() != 1) {\n            return;\n        }\n        //设置为按下\n        GameData.set_game_state(2);\n        //重置时间\n        this.touch_time = 0;\n        //播放声音\n        this.sound_ctl.play_start();\n\n    }\n    /**\n     * 触控结束\n     * @param e \n     * @returns \n     */\n    touch_end(e: EventTouch) {\n        // 合法性判断\n        if (GameData.get_game_state() != 2) {\n            return;\n        }\n        //设置为按下\n        GameData.set_game_state(3);\n        //停止播放声音\n        this.sound_ctl.play_stop();\n        //英雄恢复身高\n        this.hero_ctl.touch_end();\n        //箱子弹起\n        this.box_arr[this.box_arr.length - 2].touch_end();\n        //设置英雄显示层级为最上层\n        this.hero_ctl.set_sibling(this.node.children.length);\n        //重置英雄旋转的欧拉角\n        this.hero_ctl.reset_angle();\n        //根据目标箱子实现跳跃\n        this.hero_ctl.jump_by_box(this.box_arr[this.box_arr.length - 1],\n            this.touch_time, (score: number, collider_node: Node) => {\n                //判断是否发生碰撞\n                if (collider_node) { // 没有踏空\n                    //判断碰撞的箱子是脚下的箱子还是目标箱子\n                    if (this.box_arr[this.box_arr.length - 1].node != collider_node) {\n                        //脚下的箱子\n                        GameData.set_game_state(1);\n                    } else {\n                        // 这里是目标箱子\n                        //播放得分声音,或是失败声音\n                        this.sound_ctl.play_score(score);\n                        //根据得分判断滑倒/踏空\n                        switch (score) {\n                            case -1:\n                                this.hero_ctl.slip();\n                                break;\n                            case 0:\n                                this.hero_ctl.miss(this.box_arr[this.box_arr.length - 1].node\n                                    ,this.box_arr[this.box_arr.length - 2].node);\n                                break;\n                        }\n                        //计算真实得分\n                        score = GameData.computed_step_score(score);\n                        //统计历史最高分\n                        GameData.record_history_score();\n                        //分数大于0,可以继续游戏\n                        if (score > 0) {\n                            //英雄身上飘分\n                            this.hero_ctl.show_score(score);\n                            //播放英雄落地小球飞溅特效\n                            this.hero_ctl.jump_end_effect();\n                            //发送事件,更新住屏幕上的本局总分数\n                            EventDispatcher.get_instance().target.emit(EventDispatcher.UPDATE_SCORE_LABEL);\n                            //产生新的箱子\n                            this.next_box();\n                            //根据参考点进行屏幕移动\n                            this.move();\n                            //设置状态为1,解锁触控\n                            GameData.set_game_state(1);\n                        } else {\n                            //发送游戏结束事件,用以打开over_page面板\n                            EventDispatcher.get_instance().target.emit(EventDispatcher.SHOW_OVER_WINDOW);\n                            //游戏状态设置为4(游戏结束)\n                            GameData.set_game_state(4);\n                        }\n                    }\n                } else {//踏空了\n                    //播放失败声音\n                    this.sound_ctl.play_score(score);\n                    //执行踏空动画\n                    this.hero_ctl.miss(this.box_arr[this.box_arr.length - 1].node\n                        ,this.box_arr[this.box_arr.length - 2].node);\n                        //发送游戏结束事件,用以打开over_page面板\n                     EventDispatcher.get_instance().target.emit(EventDispatcher.SHOW_OVER_WINDOW);\n                      //游戏状态设置为4(游戏结束)\n                     GameData.set_game_state(4);\n                }\n                //清理不需要显示的箱子\n                this.step_clear();\n            });\n    }\n    \n\n    /**\n     * 产生新的箱子\n     */\n    next_box(): void {\n        //获取当前最后一个箱子坐标\n        let last_position = this.box_arr[this.box_arr.length - 1].node.getPosition();\n        //计算获取向量\n        let nor_v3 = last_position.clone().subtract(this.box_arr[this.box_arr.length - 2].node.getPosition()).normalize();\n        //随机,x,y\n        let r_x_y = Math.random() * 150 + 300;\n        //随机箱子方向\n        if (Math.random() < 0.5) {\n            nor_v3.x = nor_v3.x * -1;\n        }\n        //根据以上数据,获取新箱子坐标\n        let new_position = new Vec3(last_position.x + nor_v3.x * r_x_y, last_position.y + nor_v3.y * r_x_y);\n        //创建箱子,并且执行箱子初始动画\n        this.create_box(new_position).action_tween();\n    }\n\n    /**\n     * 屏幕移动\n     */\n    move(): void {\n        //获取倒数一箱子坐标\n        let first: Vec3 = this.box_arr[this.box_arr.length - 1].node.getPosition();\n        //获取倒数二箱子坐标\n        let second: Vec3 = this.box_arr[this.box_arr.length - 2].node.getPosition();\n        //向量计算\n        let mid_position: Vec3 = first.subtract(second);\n        //计算出两个箱子的中心点\n        mid_position.x = mid_position.x / 2 + second.x;\n        mid_position.y = mid_position.y / 2 + second.y;\n        //获取对应的世界坐标\n        let world_position: Vec3 = this.node.getComponent(UITransform).convertToWorldSpaceAR(mid_position);\n        //根据世界坐标转换成canvas下的坐标\n        let canvas_position: Vec3 = this.node.getParent().getComponent(UITransform).convertToNodeSpaceAR(world_position);\n        //根据目标点坐标,计算出来差值\n        let pos: Vec3 = this.light_house.getPosition().subtract(canvas_position);\n        //执行移动动画\n        tween(this.node).by(0.5, { position: new Vec3(pos.x, pos.y) }).start(); \n        // this.hero_ctl.set_sibling(this.node.children.length);\n    }\n\n    /**\n     * 帧频更新\n     * @param deltaTime \n     * @returns \n     */\n    update(deltaTime: number) {\n        //合法性判断\n        if (GameData.get_game_state() != 2) {\n            return;\n        }\n        //触控事件++\n        this.touch_time++;\n        //让英雄执行变矮胖子动画\n        this.hero_ctl.touch_start(deltaTime, this.box_arr[this.box_arr.length - 2].get_height());\n        //让箱子压扁\n        this.box_arr[this.box_arr.length - 2].touch_start(deltaTime);\n    }\n\n    /**\n     * 清理logic_layer的子元素\n     */\n    clear_all() {\n        this.node.removeAllChildren();\n        this.box_arr.splice(0,this.box_arr.length);\n    }\n\n    /**\n     * 根据坐标创建箱子,随机的\n     * @param pos 坐标\n     * @returns \n     */\n    create_box(pos: Vec3): BoxCtl {\n        //实例化箱子\n        let ctl = instantiate(this.box_pre).getComponent(BoxCtl);\n        //随机箱子\n        ctl.random_box(this.node, pos);\n        this.box_arr.push(ctl);\n        return ctl;\n    }\n\n    /**\n     * 初始化游戏\n     * @param game_state 状态,1,-1\n     */\n    run_game(game_state:number) {\n        //状态设置\n        GameData.set_game_state(game_state);\n        //logic_layer 给与默认位置0,0\n        this.node.setPosition(0,0);\n        //清理全部子节点\n        this.clear_all();\n        //创建2个箱子\n        let box_1 = this.create_box(new Vec3(-133, -207));\n        this.create_box(new Vec3(169, -44));\n        //create hero\n        this.hero_ctl = instantiate(this.hero_pre).getComponent(HeroCtl);\n        this.hero_ctl.init_hero(this.node, box_1.get_jump_position());\n        //屏幕移动一下,根据箱子和参考点\n        this.move();\n    }\n\n    /**\n     * 自动跳跃\n     * @returns \n     */\n    auto_jump(){\n        //合法性判断\n        if(GameData.get_game_state()!=-1){\n            return;\n        }\n        //重置英雄的欧拉角\n        this.hero_ctl.reset_angle();\n        //获取英雄坐标\n        let pos_hero = this.hero_ctl.node.getPosition();\n        //获取目标箱子坐标\n        let pos_box = this.box_arr[this.box_arr.length -1].get_jump_position().subtract(pos_hero).normalize();\n        //执行跳跃\n        this.hero_ctl.jump_by_postion(\n            this.box_arr[this.box_arr.length -1].get_jump_position(),pos_box.x,()=>{\n                 //合法性判断\n                if(GameData.get_game_state()!=-1){\n                    return;\n                }\n                //跳跃完毕后,产生新的箱子\n                this.next_box();\n                //跳跃完毕后,屏幕移动\n                this.move();\n                //跳跃完毕后,设置英雄的显示层级,最高\n                this.hero_ctl.set_sibling(this.node.children.length);\n                //跳跃完毕后,清理不需要渲染的箱子\n                this.step_clear();\n            });\n    }\n\n    /**\n     * 清理不需要渲染的箱子,用于提高性能(draw call)\n     */    \n    step_clear(){\n        //默认只留5个箱子,其他的都remove掉\n        while(this.box_arr.length>5){\n            //从数组前面弹出来一个\n            let box = this.box_arr.shift();\n            if(box){\n                box.node.removeFromParent();\n            }\n        }\n    }\n\n\n}\n\n"]}
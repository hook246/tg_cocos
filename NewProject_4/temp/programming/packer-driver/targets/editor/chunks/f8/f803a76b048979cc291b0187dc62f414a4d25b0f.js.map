{"version":3,"sources":["file:///Users/feiwang/NewProject_4/node_modules/axios/lib/helpers/throttle.js"],"names":["throttle","fn","freq","timestamp","threshold","lastArgs","timer","invoke","args","now","Date","clearTimeout","apply","throttled","passed","setTimeout","flush"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,WAASA,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4B;AAC1B,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,SAAS,GAAG,OAAOF,IAAvB;AACA,QAAIG,QAAJ;AACA,QAAIC,KAAJ;;AAEA,UAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAb,KAA4B;AACzCN,MAAAA,SAAS,GAAGM,GAAZ;AACAJ,MAAAA,QAAQ,GAAG,IAAX;;AACA,UAAIC,KAAJ,EAAW;AACTK,QAAAA,YAAY,CAACL,KAAD,CAAZ;AACAA,QAAAA,KAAK,GAAG,IAAR;AACD;;AACDL,MAAAA,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeJ,IAAf;AACD,KARD;;AAUA,UAAMK,SAAS,GAAG,CAAC,GAAGL,IAAJ,KAAa;AAC7B,YAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,YAAMK,MAAM,GAAGL,GAAG,GAAGN,SAArB;;AACA,UAAKW,MAAM,IAAIV,SAAf,EAA0B;AACxBG,QAAAA,MAAM,CAACC,IAAD,EAAOC,GAAP,CAAN;AACD,OAFD,MAEO;AACLJ,QAAAA,QAAQ,GAAGG,IAAX;;AACA,YAAI,CAACF,KAAL,EAAY;AACVA,UAAAA,KAAK,GAAGS,UAAU,CAAC,MAAM;AACvBT,YAAAA,KAAK,GAAG,IAAR;AACAC,YAAAA,MAAM,CAACF,QAAD,CAAN;AACD,WAHiB,EAGfD,SAAS,GAAGU,MAHG,CAAlB;AAID;AACF;AACF,KAdD;;AAgBA,UAAME,KAAK,GAAG,MAAMX,QAAQ,IAAIE,MAAM,CAACF,QAAD,CAAtC;;AAEA,WAAO,CAACQ,SAAD,EAAYG,KAAZ,CAAP;AACD;;;;;yBAEchB,Q","sourcesContent":["/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  let threshold = 1000 / freq;\n  let lastArgs;\n  let timer;\n\n  const invoke = (args, now = Date.now()) => {\n    timestamp = now;\n    lastArgs = null;\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n    fn.apply(null, args);\n  }\n\n  const throttled = (...args) => {\n    const now = Date.now();\n    const passed = now - timestamp;\n    if ( passed >= threshold) {\n      invoke(args, now);\n    } else {\n      lastArgs = args;\n      if (!timer) {\n        timer = setTimeout(() => {\n          timer = null;\n          invoke(lastArgs)\n        }, threshold - passed);\n      }\n    }\n  }\n\n  const flush = () => lastArgs && invoke(lastArgs);\n\n  return [throttled, flush];\n}\n\nexport default throttle;\n"]}
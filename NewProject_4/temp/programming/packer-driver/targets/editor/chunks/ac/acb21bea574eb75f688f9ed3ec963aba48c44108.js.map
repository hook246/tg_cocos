{"version":3,"sources":["file:///Users/feiwang/NewProject_4/assets/resources/scripts/login/loginModel.ts"],"names":["_decorator","basePageModel","ccclass","property","walletType","walletChain","loginUrls","firstLoginCheck","tgLogin","pwdLogin","loginModel","start","isFirst","checkLoginFirst","update","deltaTime","isFirstLogin","window","axios","post","id","data","firstLogin","loginData","token"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;4BAsBlBI,U,0BAAAA,U;eAAAA,U;;;6BAEAC,W,0BAAAA,W;eAAAA,W;;;2BAECC,S,GAAY;AACvBC,QAAAA,eAAe,EAAE,0DADM;AAEvBC,QAAAA,OAAO,EAAE,uDAFc;AAGvBC,QAAAA,QAAQ,EAAE;AAHa,O;;4BAsFZC,U,WADZR,OAAO,CAAC,YAAD,C,gBAAR,MACaQ,UADb;AAAA;AAAA,0CAC8C;AAC/B,cAALC,KAAK,GAAG;AACV,gBAAMC,OAAO,GAAG,MAAM,KAAKC,eAAL,EAAtB;;AACA,cAAGD,OAAH,EAAW,CACP;AACH,WAFD,MAEK;AACF,kBAAM,KAAKJ,OAAL,EAAN;AACF;AACF;;AAEDM,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAAE;;AAEP,cAAfF,eAAe,GAAE;AACrB,gBAAMG,YAAY,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAaC,IAAb,CAA+Cb,SAAS,CAACC,eAAzD,EAA0E;AACjGa,YAAAA,EAAE,EAAE;AAD6F,WAA1E,CAA3B;AAGA,iBAAOJ,YAAY,CAACK,IAAb,CAAkBA,IAAlB,CAAuBC,UAA9B;AACD;;AAEY,cAAPd,OAAO,GAAE;AAAA;;AACb,gBAAMe,SAAS,GAAG,MAAMN,MAAM,CAACC,KAAP,CAAaC,IAAb,CAAuCb,SAAS,CAACE,OAAjD,EAA0D;AAC9EY,YAAAA,EAAE,EAAE;AAD0E,WAA1D,CAAxB;;AAIA,cAAGG,SAAH,+BAAGA,SAAS,CAAEF,IAAd,qCAAG,gBAAiBA,IAApB,aAAG,qBAAuBG,KAA1B,EAAgC,CAC5B;AACH;AACF;;AA3BuC,O","sourcesContent":["import { _decorator, Component, Node } from 'cc';\nimport { basePageModel } from '../common/basePageModel';\nconst { ccclass, property } = _decorator;\n\nexport interface AxiosResponse<T = any, D = any> {\n    data: T;\n    status: number;\n    statusText: string;\n    headers: any;\n    config: any;\n    request?: any;\n  }\n\n\n\ndeclare global {\n    interface Window {\n      axios: {\n        post<T = any, R = AxiosResponse<T>, D = any>(url: string, data?: D, config?: any): Promise<R>;\n      };\n      startCanvas: any;\n    }\n  }\n\nexport enum walletType {}\n\nexport enum walletChain {}\n\nexport const loginUrls = {\n  firstLoginCheck: \"https://api.infinitytest.cc/api/v1/user/auth/first_login\",\n  tgLogin: \"https://api.infinitytest.cc/api/v1/user/auth/tg_login\",\n  pwdLogin: \"https://api.infinitytest.cc/api/v1/user/auth/pwd_login\",\n};\n\nexport interface firstLoginCheckDataType {\n  id: number;\n}\n\nexport interface firstLoginCheckResponseType {\n  code: string;\n  data: {\n    firstLogin: true;\n  };\n  message: string;\n}\n\nexport interface tgLoginDataType {\n  authDate?: number;\n  firstName?: string;\n  hash?: string;\n  id: number;\n  inviteCode?: string;\n  lastName?: string;\n  loginChannel?: \"GAME_LOBBY\";\n  photoUrl?: string;\n  username?: string;\n}\n\nexport interface tgLoginResponseType {\n  code: string;\n  data: {\n    avatar: string;\n    email: string;\n    expiration: number;\n    gamePoint: number;\n    inviteCode: string;\n    isNewUser: true;\n    isSetPwd: true;\n    token: string;\n    totalPoint: 0;\n    userId: number;\n    userName: string;\n    walletAddress: string;\n    walletChain: \"ETH\";\n    walletType: \"METAMASK\";\n  };\n  message: string;\n}\n\nexport interface pwdLoginDataType {\n  accountUserName: string;\n  authDate?: number;\n  firstName?: string;\n  hash?: string;\n  id: number;\n  inviteCode?: string;\n  lastName?: string;\n  loginChannel?: \"GAME_LOBBY\";\n  password: string;\n  photoUrl?: string;\n  username?: string;\n}\n\nexport interface pwdLoginResponseType {\n  code: string;\n  data: {\n    avatar: string;\n    email: string;\n    expiration: number;\n    gamePoint: number;\n    inviteCode: string;\n    isNewUser: true;\n    isSetPwd: true;\n    token: string;\n    userId: number;\n    userName: string;\n    walletAddress: string;\n    walletChain: \"ETH\";\n    walletType: \"METAMASK\";\n  };\n  message: string;\n}\n\n@ccclass('loginModel')\nexport class loginModel extends basePageModel {\n    async start() {\n        const isFirst = await this.checkLoginFirst()\n        if(isFirst){\n            //展示登录页面\n        }else{\n           await this.tgLogin()\n        }\n      }\n    \n      update(deltaTime: number) {}\n    \n      async checkLoginFirst(){\n        const isFirstLogin = await window.axios.post<firstLoginCheckResponseType>(loginUrls.firstLoginCheck, {\n            id: 0\n        })\n        return isFirstLogin.data.data.firstLogin\n      }\n    \n      async tgLogin(){\n        const loginData = await window.axios.post<tgLoginResponseType>(loginUrls.tgLogin, {\n            id: 0\n        })\n    \n        if(loginData?.data?.data?.token){\n            //登录成功\n        }\n      }\n}\n\n"]}
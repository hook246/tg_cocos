{"version":3,"sources":["file:///Users/feiwang/NewProject_4/assets/resources/scripts/test/testSortChildren.ts"],"names":["_decorator","Component","ccclass","property","NewComponent","start","window","sort","update","deltaTime","array","a","b","priority","indexA","indexOf","indexB","console","log"],"mappings":";;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;;;;;OAEf;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;;8BAGjBI,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb,SACkCH,SADlC,CAC4C;AACxCI,QAAAA,KAAK,GAAG;AACJC,UAAAA,MAAM,CAAC,cAAD,CAAN,GAAyB,MAAI;AACzB,iBAAKC,IAAL;AACH,WAFD;AAGH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAEDF,QAAAA,IAAI,GAAE;AACN;AACA;AACA;AACA,gBAAMG,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAd;AAEAA,UAAAA,KAAK,CAACH,IAAN,CAAW,CAACI,CAAD,EAAIC,CAAJ,KAAU;AACjB;AACA,kBAAMC,QAAQ,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB,CAFiB,CAIjB;;AACA,gBAAIC,MAAM,GAAGD,QAAQ,CAACE,OAAT,CAAiBJ,CAAjB,CAAb;AACA,gBAAIK,MAAM,GAAGH,QAAQ,CAACE,OAAT,CAAiBH,CAAjB,CAAb,CANiB,CAQjB;;AACA,gBAAIE,MAAM,KAAK,CAAC,CAAhB,EAAmBA,MAAM,GAAG,CAAT,CATF,CASc;;AAC/B,gBAAIE,MAAM,KAAK,CAAC,CAAhB,EAAmBA,MAAM,GAAG,CAAT,CAVF,CAUc;;AAE/B,mBAAOF,MAAM,GAAGE,MAAhB;AACD,WAbH;AAeAC,UAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ,EArBM,CAsBN;AACC;;AAlCuC,O","sourcesContent":["import { _decorator, Component, Node, UITransform } from 'cc';\nimport _ from 'lodash'\nconst { ccclass, property } = _decorator;\n\n@ccclass('NewComponent')\nexport class NewComponent extends Component {\n    start() {\n        window['sortChildren'] = ()=>{\n            this.sort()\n        } \n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    sort(){\n    //    this.node.children.sort((a, b)=>{\n    //         return b.getComponent(UITransform).width - a.getComponent(UITransform).width\n    //    })\n    const array = [0, 1, 2, 3, 0, 1, 2, 3, 0];\n\n    array.sort((a, b) => {\n        // 定义一个排序优先级数组\n        const priority = [2, 0, 1];\n        \n        // 获取 a 和 b 在优先级数组中的索引\n        let indexA = priority.indexOf(a);\n        let indexB = priority.indexOf(b);\n        \n        // 比较索引，确定排序\n        if (indexA === -1) indexA = 3; // 如果找不到，放在最后\n        if (indexB === -1) indexB = 3; // 如果找不到，放在最后\n        \n        return indexA - indexB;\n      });\n    \n    console.log(array);\n    // 输出: [2, 2, 0, 0, 1, 1, 3, 3, 3]\n    }\n}\n\n"]}
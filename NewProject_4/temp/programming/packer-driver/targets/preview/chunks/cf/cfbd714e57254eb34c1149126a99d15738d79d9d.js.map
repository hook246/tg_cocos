{"version":3,"sources":["file:///Users/feiwang/NewProject_4/assets/resources/scripts/login/loginModel.ts"],"names":["_decorator","basePageModel","loginView","ccclass","property","walletType","walletChain","loginUrls","firstLoginCheck","tgLogin","pwdLogin","loginModel","start","isFirst","checkLoginFirst","update","deltaTime","isFirstLogin","window","axios","post","id","data","firstLogin","loginData","authDate","firstName","hash","lastName","loginChannel","photoUrl","username","token","veteranLogin","view","getComponent","accountInput","string","length","pwdInput","accountUserName","password"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;;AACAC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,S,iBAAAA,S;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;4BAwBlBK,U,0BAAAA,U;eAAAA,U;;;6BAEAC,W,0BAAAA,W;eAAAA,W;;;2BAECC,S,GAAY;AACvBC,QAAAA,eAAe,EAAE,0DADM;AAEvBC,QAAAA,OAAO,EAAE,uDAFc;AAGvBC,QAAAA,QAAQ,EAAE;AAHa,O;;4BAsFZC,U,WADZR,OAAO,CAAC,YAAD,C,gBAAR,MACaQ,UADb;AAAA;AAAA,0CAC8C;AACtCC,QAAAA,KAAK,GAAG;AAAA;;AAAA;AACZ,gBAAMC,OAAO,SAAS,KAAI,CAACC,eAAL,EAAtB;;AACA,gBAAID,OAAJ,EAAa,CACX;AACD,aAFD,MAEO;AACL,oBAAM,KAAI,CAACJ,OAAL,EAAN;AACD;AANW;AAOb;;AAEDM,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAAE;;AAEtBF,QAAAA,eAAe,GAAG;AAAA;AACtB,gBAAMG,YAAY,SAASC,MAAM,CAACC,KAAP,CAAaC,IAAb,CACzBb,SAAS,CAACC,eADe,EAEzB;AACEa,cAAAA,EAAE,EAAE;AADN,aAFyB,CAA3B;AAMA,mBAAOJ,YAAY,CAACK,IAAb,CAAkBA,IAAlB,CAAuBC,UAA9B;AAPsB;AAQvB;;AAEKd,QAAAA,OAAO,GAAG;AAAA;AAAA;;AACd,gBAAMe,SAAS,SAASN,MAAM,CAACC,KAAP,CAAaC,IAAb,CACtBb,SAAS,CAACE,OADY,EAEtB;AACEgB,cAAAA,QAAQ,EAAE,CADZ;AAEEC,cAAAA,SAAS,EAAE,EAFb;AAGEC,cAAAA,IAAI,EAAE,EAHR;AAIEN,cAAAA,EAAE,EAAE,CAJN;AAKEO,cAAAA,QAAQ,EAAE,EALZ;AAMEC,cAAAA,YAAY,EAAE,YANhB;AAOEC,cAAAA,QAAQ,EAAE,EAPZ;AAQEC,cAAAA,QAAQ,EAAE;AARZ,aAFsB,CAAxB;;AAcA,gBAAIP,SAAJ,+BAAIA,SAAS,CAAEF,IAAf,qCAAI,gBAAiBA,IAArB,aAAI,qBAAuBU,KAA3B,EAAkC,CAChC;AACD;AAjBa;AAkBf;;AAEKC,QAAAA,YAAY,GAAE;AAAA;;AAAA;AAClB,gBAAG,MAAI,CAACC,IAAL,CAAUC,YAAV;AAAA;AAAA,wCAAkCC,YAAlC,CAA+CC,MAA/C,CAAsDC,MAAtD,IAAgE,MAAI,CAACJ,IAAL,CAAUC,YAAV;AAAA;AAAA,wCAAkCI,QAAlC,CAA2CF,MAA3C,CAAkDC,MAArH,EAA4H,CAE3H;;AAED,gBAAMd,SAAS,SAASN,MAAM,CAACC,KAAP,CAAaC,IAAb,CACpBb,SAAS,CAACG,QADU,EAEpB;AACI8B,cAAAA,eAAe,EAAE,EADrB;AAEIf,cAAAA,QAAQ,EAAE,CAFd;AAGIC,cAAAA,SAAS,EAAE,EAHf;AAIIC,cAAAA,IAAI,EAAE,EAJV;AAKIN,cAAAA,EAAE,EAAE,CALR;AAMIO,cAAAA,QAAQ,EAAE,EANd;AAOIC,cAAAA,YAAY,EAAE,YAPlB;AAQIY,cAAAA,QAAQ,EAAE,EARd;AASIX,cAAAA,QAAQ,EAAE,EATd;AAUIC,cAAAA,QAAQ,EAAE;AAVd,aAFoB,CAAxB,CALkB,CAqBlB;AAEA;AAvBkB;AAwBnB;;AAlE2C,O","sourcesContent":["import { _decorator, Component, Node } from \"cc\";\nimport { basePageModel } from \"../common/basePageModel\";\nimport { loginView } from \"./loginView\";\nconst { ccclass, property } = _decorator;\n\nexport interface AxiosResponse<T = any, D = any> {\n  data: T;\n  status: number;\n  statusText: string;\n  headers: any;\n  config: any;\n  request?: any;\n}\n\ndeclare global {\n  interface Window {\n    axios: {\n      post<T = any, R = AxiosResponse<T>, D = any>(\n        url: string,\n        data?: D,\n        config?: any\n      ): Promise<R>;\n    };\n    startCanvas: any;\n  }\n}\n\nexport enum walletType {}\n\nexport enum walletChain {}\n\nexport const loginUrls = {\n  firstLoginCheck: \"https://api.infinitytest.cc/api/v1/user/auth/first_login\",\n  tgLogin: \"https://api.infinitytest.cc/api/v1/user/auth/tg_login\",\n  pwdLogin: \"https://api.infinitytest.cc/api/v1/user/auth/pwd_login\",\n};\n\nexport interface firstLoginCheckDataType {\n  id: number;\n}\n\nexport interface firstLoginCheckResponseType {\n  code: string;\n  data: {\n    firstLogin: true;\n  };\n  message: string;\n}\n\nexport interface tgLoginDataType {\n  authDate?: number;\n  firstName?: string;\n  hash?: string;\n  id: number;\n  inviteCode?: string;\n  lastName?: string;\n  loginChannel?: \"GAME_LOBBY\";\n  photoUrl?: string;\n  username?: string;\n}\n\nexport interface tgLoginResponseType {\n  code: string;\n  data: {\n    avatar: string;\n    email: string;\n    expiration: number;\n    gamePoint: number;\n    inviteCode: string;\n    isNewUser: true;\n    isSetPwd: true;\n    token: string;\n    totalPoint: 0;\n    userId: number;\n    userName: string;\n    walletAddress: string;\n    walletChain: \"ETH\";\n    walletType: \"METAMASK\";\n  };\n  message: string;\n}\n\nexport interface pwdLoginDataType {\n  accountUserName: string;\n  authDate?: number;\n  firstName?: string;\n  hash?: string;\n  id: number;\n  inviteCode?: string;\n  lastName?: string;\n  loginChannel?: \"GAME_LOBBY\";\n  password: string;\n  photoUrl?: string;\n  username?: string;\n}\n\nexport interface pwdLoginResponseType {\n  code: string;\n  data: {\n    avatar: string;\n    email: string;\n    expiration: number;\n    gamePoint: number;\n    inviteCode: string;\n    isNewUser: true;\n    isSetPwd: true;\n    token: string;\n    userId: number;\n    userName: string;\n    walletAddress: string;\n    walletChain: \"ETH\";\n    walletType: \"METAMASK\";\n  };\n  message: string;\n}\n\n@ccclass(\"loginModel\")\nexport class loginModel extends basePageModel {\n  async start() {\n    const isFirst = await this.checkLoginFirst();\n    if (isFirst) {\n      //展示登录页面\n    } else {\n      await this.tgLogin();\n    }\n  }\n\n  update(deltaTime: number) {}\n\n  async checkLoginFirst() {\n    const isFirstLogin = await window.axios.post<firstLoginCheckResponseType>(\n      loginUrls.firstLoginCheck,\n      {\n        id: 0,\n      }\n    );\n    return isFirstLogin.data.data.firstLogin;\n  }\n\n  async tgLogin() {\n    const loginData = await window.axios.post<tgLoginResponseType>(\n      loginUrls.tgLogin,\n      {\n        authDate: 0,\n        firstName: '',\n        hash: '',\n        id: 0,\n        lastName: '',\n        loginChannel: \"GAME_LOBBY\",\n        photoUrl: '',\n        username: ''\n      }\n    );\n\n    if (loginData?.data?.data?.token) {\n      //登录成功\n    }\n  }\n\n  async veteranLogin(){\n    if(this.view.getComponent(loginView).accountInput.string.length || this.view.getComponent(loginView).pwdInput.string.length){\n        \n    }\n\n    const loginData = await window.axios.post<pwdLoginDataType>(\n        loginUrls.pwdLogin,\n        {\n            accountUserName: '',\n            authDate: 0,\n            firstName: '',\n            hash: '',\n            id: 0,\n            lastName: '',\n            loginChannel: \"GAME_LOBBY\",\n            password: '',\n            photoUrl: '',\n            username: ''\n        }\n      );\n\n    //   if(){\n\n    //   }\n  }\n}\n"]}
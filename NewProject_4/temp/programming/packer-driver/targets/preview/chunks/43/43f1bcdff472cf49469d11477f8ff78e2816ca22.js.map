{"version":3,"sources":["file:///Users/feiwang/NewProject_4/node_modules/axios/lib/helpers/trackStream.js"],"names":["streamChunk","chunk","chunkSize","len","byteLength","pos","end","slice","readBytes","iterable","readStream","stream","Symbol","asyncIterator","reader","getReader","done","value","read","cancel","trackStream","onProgress","onFinish","iterator","bytes","_onFinish","e","ReadableStream","pull","controller","next","close","loadedBytes","enqueue","Uint8Array","err","reason","return","highWaterMark"],"mappings":"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","sourcesContent":["\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n"]}